generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(cuid())
  email                      String                      @unique
  name                       String
  password                   String
  createdAt                  DateTime                    @default(now())
  lastLogin                  DateTime?
  phone                      String?
  status                     String                      @default("ACTIVE")
  role                       String
  avatarUrl                  String?                     @default("/images/avatars/default-doctor.png")
  userId                     String                      @unique
  affiliations               Affiliation[]
  createdAppointments        Appointment[]               @relation("CreatedAppointments")
  doctorAppointments         Appointment[]               @relation("DoctorAppointments")
  patientAppointments        Appointment[]               @relation("PatientAppointments")
  auditLogs                  AuditLog[]
  createdConsultationReports ConsultationReport[]        @relation("CreatedConsultationReports")
  patientConsultationReports ConsultationReport[]        @relation("PatientConsultationReports")
  createdConsultations       Consultation[]              @relation("CreatedConsultations")
  doctorConsultations        Consultation[]              @relation("DoctorConsultations")
  patientConsultations       Consultation[]              @relation("PatientConsultations")
  deviceTokens               DeviceToken[]
  doctorInfo                 DoctorInfo?
  doctorLabResults           LabResult[]                 @relation("DoctorLabResults")
  patientLabResults          LabResult[]                 @relation("PatientLabResults")
  notifications              Notification[]
  patientInfo                PatientInfo?
  createdPayments            Payment[]                   @relation("CreatedPayments")
  patientPayments            Payment[]                   @relation("PatientPayments")
  prescriptions              Prescription[]
  promotoraInfo              PromotoraInfo?
  createdReceipts            Receipt[]                   @relation("CreatedReceipts")
  patientReceipts            Receipt[]                   @relation("PatientReceipts")
  secretariaInfo             SecretariaInfo?
  notificationPreference     UserNotificationPreference?
  ipssScores                 IpssScore[]                 @relation("PatientIpssScores")
  ipssCreated                IpssScore[]                 @relation("DoctorIpssScores")
  patientReports             Report[]                    @relation("PatientReports")

  @@map("users")
}

model PatientInfo {
  id              String   @id @default(cuid())
  userId          String   @unique
  cedula          String   @unique
  fechaNacimiento DateTime
  telefono        String?
  direccion       String?
  bloodType       String?
  gender          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("patient_info")
}

model DoctorInfo {
  id           String   @id @default(cuid())
  userId       String   @unique
  especialidad String
  cedula       String   @unique
  telefono     String?
  direccion    String?
  area         String?
  contacto     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("doctor_info")
}

model PromotoraInfo {
  id           String   @id @default(cuid())
  userId       String   @unique
  cedula       String   @unique
  telefono     String?
  direccion    String?
  areaAsignada String?
  supervisor   String?
  fechaIngreso DateTime
  salario      Decimal? @db.Decimal(10, 2)
  comision     Decimal? @db.Decimal(5, 2)
  estado       String   @default("ACTIVA")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("promotora_info")
}

model SecretariaInfo {
  id             String   @id @default(cuid())
  userId         String   @unique
  cedula         String   @unique
  telefono       String?
  direccion      String?
  turno          String?
  supervisor     String?
  fechaIngreso   DateTime
  salario        Decimal? @db.Decimal(10, 2)
  especialidades String?
  estado         String   @default("ACTIVA")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("secretaria_info")
}

model Company {
  id           String        @id @default(cuid())
  nombre       String
  rif          String        @unique
  direccion    String?
  telefono     String?
  email        String?
  contacto     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  affiliations Affiliation[]

  @@map("companies")
}

model Provider {
  id           String        @id @default(cuid())
  nombre       String
  especialidad String
  telefono     String?
  email        String?
  direccion    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("providers")
}

model Appointment {
  id            String            @id @default(cuid())
  fecha         DateTime
  hora          String
  tipo          AppointmentType
  estado        AppointmentStatus @default(PROGRAMADA)
  notas         String?
  providerId    String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  createdBy     String
  doctorUserId  String?
  patientUserId String
  creator       User              @relation("CreatedAppointments", fields: [createdBy], references: [userId], onDelete: Cascade)
  doctor        User?             @relation("DoctorAppointments", fields: [doctorUserId], references: [userId], onDelete: Cascade)
  patient       User              @relation("PatientAppointments", fields: [patientUserId], references: [userId], onDelete: Cascade)
  provider      Provider?         @relation(fields: [providerId], references: [id])
  consultations Consultation[]

  @@map("appointments")
}

model Consultation {
  id            String               @id @default(cuid())
  fecha         DateTime
  motivo        String
  sintomas      String?
  diagnostico   String?
  tratamiento   String?
  observaciones String?
  appointmentId String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     String
  doctorUserId  String?
  patientUserId String
  reports       ConsultationReport[]
  appointment   Appointment?         @relation(fields: [appointmentId], references: [id])
  creator       User                 @relation("CreatedConsultations", fields: [createdBy], references: [userId], onDelete: Cascade)
  doctor        User?                @relation("DoctorConsultations", fields: [doctorUserId], references: [userId], onDelete: Cascade)
  patient       User                 @relation("PatientConsultations", fields: [patientUserId], references: [userId], onDelete: Cascade)
  labResults    LabResult[]
  prescriptions Prescription[]

  @@map("consultations")
}

model LabResult {
  id               String        @id @default(cuid())
  nombre           String
  tipo             String
  resultado        String
  valores          Json?
  fecha            DateTime      @default(now())
  consultationId   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  patientUserId    String
  doctorUserId     String?
  estado           String        @default("PENDIENTE")
  archivoContenido String?
  archivoNombre    String?
  archivoTamaño   Int?
  archivoTipo      String?
  consultation     Consultation? @relation(fields: [consultationId], references: [id])
  doctor           User?         @relation("DoctorLabResults", fields: [doctorUserId], references: [userId])
  patient          User          @relation("PatientLabResults", fields: [patientUserId], references: [userId], onDelete: Cascade)

  @@index([patientUserId])
  @@index([doctorUserId])
  @@index([estado])
  @@map("lab_results")
}

model IpssScore {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation("PatientIpssScores", fields: [userId], references: [userId], onDelete: Cascade)
  fecha      DateTime @default(now())
  puntaje    Int // Total score 0-35
  categoria  String // "Leve" | "Moderado" | "Severo"
  respuestas Json // {q1: number, q2: number, ... q7: number}
  createdBy  String?
  doctor     User?    @relation("DoctorIpssScores", fields: [createdBy], references: [userId])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([fecha])
  @@map("ipss_scores")
}

model Prescription {
  id             String        @id @default(cuid())
  medicamento    String
  dosis          String
  frecuencia     String
  duracion       String?
  instrucciones  String?
  consultationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  patientUserId  String
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  patient        User          @relation(fields: [patientUserId], references: [userId], onDelete: Cascade)

  @@map("prescriptions")
}

model ConsultationReport {
  id               String       @id @default(cuid())
  titulo           String
  descripcion      String?
  tipo             String       @default("Informe")
  archivoNombre    String?
  archivoUrl       String?
  archivoTipo      String?
  archivoTamaño   Int?
  patientUserId    String
  consultationId   String
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  archivoContenido String?
  consultation     Consultation @relation(fields: [consultationId], references: [id], onDelete: Cascade)
  creator          User         @relation("CreatedConsultationReports", fields: [createdBy], references: [userId], onDelete: Cascade)
  patient          User         @relation("PatientConsultationReports", fields: [patientUserId], references: [userId], onDelete: Cascade)

  @@map("consultation_reports")
}

model Payment {
  id            String        @id @default(cuid())
  monto         Decimal       @db.Decimal(10, 2)
  tipo          PaymentType
  metodo        String
  estado        PaymentStatus @default(PENDIENTE)
  fecha         DateTime
  referencia    String?
  notas         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  createdBy     String
  patientUserId String
  creator       User          @relation("CreatedPayments", fields: [createdBy], references: [userId], onDelete: Cascade)
  patient       User          @relation("PatientPayments", fields: [patientUserId], references: [userId], onDelete: Cascade)

  @@map("payments")
}

model Affiliation {
  id            String            @id @default(cuid())
  planId        String
  estado        AffiliationStatus @default(ACTIVA)
  fechaInicio   DateTime
  fechaFin      DateTime?
  monto         Decimal           @db.Decimal(10, 2)
  beneficiarios Json?
  companyId     String?
  userId        String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  tipoPago      String?
  company       Company?          @relation(fields: [companyId], references: [id])
  user          User              @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("affiliations")
}

model Supply {
  id               String       @id @default(cuid())
  nombre           String
  descripcion      String?
  cantidad         Int
  unidad           String
  precio           Decimal      @db.Decimal(10, 2)
  proveedor        String?
  fechaVencimiento DateTime?
  estado           SupplyStatus @default(DISPONIBLE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("supplies")
}

model Report {
  // Basic fields
  id          String   @id @default(cuid())
  titulo      String
  descripcion String?  @db.Text
  tipo        String
  contenido   Json
  fecha       DateTime @default(now())
  notas       String?  @db.Text
  autor       String

  // Associations
  patientUserId  String
  patient        User    @relation("PatientReports", fields: [patientUserId], references: [userId])
  consultationId String?

  // File attachment fields
  archivoNombre    String?
  archivoTipo      String?
  archivoContenido String? @db.Text
  archivoTamaño   Int?
  archivoUrl       String?

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?

  @@map("reports")
}

model Estudio {
  id          String   @id @default(cuid())
  nombre      String
  descripcion String?
  tipo        String
  precio      Decimal  @db.Decimal(10, 2)
  duracion    Int?
  requisitos  String?
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("estudios")
}

model SystemConfig {
  id                 String   @id @default(cuid())
  clinicName         String   @default("UroVital")
  clinicAddress      String?
  clinicPhone        String?
  clinicEmail        String?
  workingHours       String?
  notifications      Boolean  @default(true)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  maintenanceMode    Boolean  @default(false)
  autoBackup         Boolean  @default(true)
  dataRetention      String   @default("2 años")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("system_config")
}

model Receipt {
  id            String   @id @default(cuid())
  number        String   @unique
  amount        Decimal  @db.Decimal(10, 2)
  concept       String
  method        String
  createdAt     DateTime @default(now())
  createdBy     String?
  patientUserId String
  creator       User?    @relation("CreatedReceipts", fields: [createdBy], references: [userId], onDelete: SetNull)
  patient       User     @relation("PatientReceipts", fields: [patientUserId], references: [userId], onDelete: Cascade)

  @@map("receipts")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("audit_logs")
}

model Notification {
  id         String              @id @default(cuid())
  userId     String
  type       NotificationType
  channel    NotificationChannel
  status     NotificationStatus  @default(PENDING)
  title      String
  message    String
  data       Json?
  sentAt     DateTime?
  readAt     DateTime?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  actionText String?
  actionUrl  String?
  isRead     Boolean             @default(false)
  priority   String?             @default("MEDIUM")
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([status])
  @@index([userId, isRead])
  @@map("notifications")
}

model DeviceToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  platform  String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId, isActive])
  @@map("device_tokens")
}

model UserNotificationPreference {
  id                   String   @id @default(cuid())
  userId               String   @unique
  emailEnabled         Boolean  @default(true)
  smsEnabled           Boolean  @default(false)
  pushEnabled          Boolean  @default(true)
  appointmentReminders Boolean  @default(true)
  paymentNotifications Boolean  @default(true)
  systemAlerts         Boolean  @default(true)
  marketingEmails      Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("user_notification_preferences")
}

enum UserRole {
  ADMIN
  DOCTOR
  USER
  PROMOTORA
}

enum AppointmentType {
  CONSULTA
  SEGUIMIENTO
  URGENCIA
  PROCEDIMIENTO
}

enum AppointmentStatus {
  PROGRAMADA
  CONFIRMADA
  EN_PROGRESO
  COMPLETADA
  CANCELADA
  NO_ASISTIO
}

enum PaymentType {
  CONSULTA_GENERAL
  CONSULTA_SEGUIMIENTO
  AFILIACION_ANUAL
  ESTUDIO_LABORATORIO
  PROCEDIMIENTO_MENOR
}

enum PaymentStatus {
  PENDIENTE
  PAGADO
  CANCELADO
  REEMBOLSADO
}

enum AffiliationStatus {
  ACTIVA
  INACTIVA
  SUSPENDIDA
  VENCIDA
  ABONO
  INICIAL
}

enum SupplyStatus {
  DISPONIBLE
  AGOTADO
  VENCIDO
  RESERVADO
}

enum NotificationType {
  APPOINTMENT_REMINDER
  PAYMENT_CONFIRMATION
  SYSTEM_ALERT
  APPOINTMENT_CANCELLATION
  NEW_MESSAGE
  APPOINTMENT
  PAYMENT_REMINDER
  LAB_RESULT_READY
  PRESCRIPTION_READY
  AFFILIATION_EXPIRING
  MAINTENANCE_NOTICE
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}
