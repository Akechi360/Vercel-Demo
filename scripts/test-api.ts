/**
 * Script para probar la API de notificaciones
 */

const API_BASE = 'http://localhost:3000';
const USER_ID = 'cmguwxaj80000vo8g2j4gvuhq'; // ID del usuario admin creado

async function testNotificationsAPI() {
  console.log('üß™ Probando API de notificaciones...\n');

  try {
    // Test 1: Obtener notificaciones
    console.log('1Ô∏è‚É£ Probando GET /api/notifications');
    const response = await fetch(`${API_BASE}/api/notifications`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-User-ID': USER_ID
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ GET /api/notifications exitoso');
      console.log(`   - Total notificaciones: ${data.totalCount}`);
      console.log(`   - No le√≠das: ${data.unreadCount}`);
      console.log(`   - Notificaciones: ${data.notifications.length}`);
      
      if (data.notifications.length > 0) {
        console.log('   - Primera notificaci√≥n:', data.notifications[0].title);
      }
    } else {
      const error = await response.text();
      console.log('‚ùå GET /api/notifications fall√≥:', response.status, error);
    }

    console.log('');

    // Test 2: Marcar una notificaci√≥n como le√≠da
    console.log('2Ô∏è‚É£ Probando PATCH /api/notifications/[id]/read');
    
    // Primero obtener las notificaciones para obtener un ID
    const notificationsResponse = await fetch(`${API_BASE}/api/notifications`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-User-ID': USER_ID
      }
    });

    if (notificationsResponse.ok) {
      const notificationsData = await notificationsResponse.json();
      const unreadNotification = notificationsData.notifications.find((n: any) => !n.isRead);
      
      if (unreadNotification) {
        const markReadResponse = await fetch(`${API_BASE}/api/notifications/${unreadNotification.id}/read`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'X-User-ID': USER_ID
          }
        });

        if (markReadResponse.ok) {
          const updatedNotification = await markReadResponse.json();
          console.log('‚úÖ PATCH /api/notifications/[id]/read exitoso');
          console.log(`   - Notificaci√≥n marcada como le√≠da: ${updatedNotification.data.title}`);
        } else {
          const error = await markReadResponse.text();
          console.log('‚ùå PATCH /api/notifications/[id]/read fall√≥:', markReadResponse.status, error);
        }
      } else {
        console.log('‚ö†Ô∏è No hay notificaciones no le√≠das para marcar como le√≠das');
      }
    }

    console.log('');

    // Test 3: Marcar todas como le√≠das
    console.log('3Ô∏è‚É£ Probando PATCH /api/notifications/read-all');
    const markAllReadResponse = await fetch(`${API_BASE}/api/notifications/read-all`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
        'X-User-ID': USER_ID
      }
    });

    if (markAllReadResponse.ok) {
      const result = await markAllReadResponse.json();
      console.log('‚úÖ PATCH /api/notifications/read-all exitoso');
      console.log(`   - Notificaciones actualizadas: ${result.updatedCount}`);
    } else {
      const error = await markAllReadResponse.text();
      console.log('‚ùå PATCH /api/notifications/read-all fall√≥:', markAllReadResponse.status, error);
    }

    console.log('');

    // Test 4: Verificar estado final
    console.log('4Ô∏è‚É£ Verificando estado final');
    const finalResponse = await fetch(`${API_BASE}/api/notifications`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-User-ID': USER_ID
      }
    });

    if (finalResponse.ok) {
      const finalData = await finalResponse.json();
      console.log('‚úÖ Estado final verificado');
      console.log(`   - Total notificaciones: ${finalData.totalCount}`);
      console.log(`   - No le√≠das: ${finalData.unreadCount}`);
    }

  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
  }
}

// Ejecutar las pruebas
testNotificationsAPI();
